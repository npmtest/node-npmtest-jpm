{"/home/travis/build/npmtest/node-npmtest-jpm/test.js":"/* istanbul instrument in package npmtest_jpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jpm/lib.npmtest_jpm.js":"/* istanbul instrument in package npmtest_jpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jpm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jpm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jpm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jpm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jpm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jpm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jpm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jpm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jpm.__dirname + '/lib.npmtest_jpm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/index.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/data/preferences.js":"exports.DEFAULT_COMMON_PREFS = {\n    // allow debug output via dump to be printed to the system console\n    // (setting it here just in case, even though PlainTextConsole also\n    // sets this preference)\n    \"browser.dom.window.dump.enabled\": true,\n    // warn about possibly incorrect code\n    \"javascript.options.strict\": true,\n    \"javascript.options.showInConsole\": true,\n\n    // Allow remote connections to the debugger\n    \"devtools.debugger.remote-enabled\" : true,\n\n    \"extensions.sdk.console.logLevel\": \"info\",\n\n    \"extensions.checkCompatibility.nightly\" : false,\n\n    // Disable extension updates and notifications.\n    \"extensions.update.enabled\" : false,\n    \"extensions.update.notifyUser\" : false,\n\n    // From:\n    // http://hg.mozilla.org/mozilla-central/file/1dd81c324ac7/build/automation.py.in//l372\n    // Only load extensions from the application and user profile.\n    // AddonManager.SCOPE_PROFILE + AddonManager.SCOPE_APPLICATION\n    \"extensions.enabledScopes\" : 5,\n    // Disable metadata caching for installed add-ons by default\n    \"extensions.getAddons.cache.enabled\" : false,\n    // Disable intalling any distribution add-ons\n    \"extensions.installDistroAddons\" : false,\n    // Allow installing extensions dropped into the profile folder\n    \"extensions.autoDisableScopes\" : 10,\n\n    \"extensions.logging.enabled\": false,\n\n    // Disable app update\n    \"app.update.enabled\" : false,\n\n    // Point update checks to a nonexistent local URL for fast failures.\n    \"extensions.update.url\" : \"http://localhost/extensions-dummy/updateURL\",\n    \"extensions.blocklist.url\" : \"http://localhost/extensions-dummy/blocklistURL\",\n    // Make sure opening about:addons won\"t hit the network.\n    \"extensions.webservice.discoverURL\" : \"http://localhost/extensions-dummy/discoveryURL\",\n    //Allow unsigned add-ons\n    \"xpinstall.signatures.required\" : false\n};\n\nexports.DEFAULT_FENNEC_PREFS = {\n  \"browser.console.showInPanel\": true,\n  \"browser.firstrun.show.uidiscovery\": false\n};\n\n// When launching a temporary new Firefox profile, use these preferences.\nexports.DEFAULT_FIREFOX_PREFS = {\n    \"browser.startup.homepage\" : \"about:blank\",\n    \"startup.homepage_welcome_url\" : \"about:blank\",\n    \"startup.homepage_welcome_url.additional\" : \"\",\n    \"devtools.errorconsole.enabled\" : true,\n    \"devtools.chrome.enabled\" : true,\n\n    // From:\n    // http://hg.mozilla.org/mozilla-central/file/1dd81c324ac7/build/automation.py.in//l388\n    // Make url-classifier updates so rare that they won\"t affect tests.\n    \"urlclassifier.updateinterval\" : 172800,\n    // Point the url-classifier to a nonexistent local URL for fast failures.\n    \"browser.safebrowsing.provider.0.gethashURL\" : \"http://localhost/safebrowsing-dummy/gethash\",\n    \"browser.safebrowsing.provider.0.keyURL\" : \"http://localhost/safebrowsing-dummy/newkey\",\n    \"browser.safebrowsing.provider.0.updateURL\" : \"http://localhost/safebrowsing-dummy/update\",\n\n    // Disable self repair/SHIELD\n    \"browser.selfsupport.url\": \"https://localhost/selfrepair\",\n\n    // Disable Reader Mode UI tour\n    \"browser.reader.detectedFirstArticle\": true\n};\n\n// When launching a temporary new Thunderbird profile, use these preferences.\n// Note that these were taken from:\n// http://mxr.mozilla.org/comm-central/source/mail/test/mozmill/runtest.py\nexports.DEFAULT_THUNDERBIRD_PREFS = {\n    // say no to slow script warnings\n    \"dom.max_chrome_script_run_time\": 200,\n    \"dom.max_script_run_time\": 0,\n    // do not ask about being the default mail client\n    \"mail.shell.checkDefaultClient\": false,\n    // disable non-gloda indexing daemons\n    \"mail.winsearch.enable\": false,\n    \"mail.winsearch.firstRunDone\": true,\n    \"mail.spotlight.enable\": false,\n    \"mail.spotlight.firstRunDone\": true,\n    // disable address books for undisclosed reasons\n    \"ldap_2.servers.osx.position\": 0,\n    \"ldap_2.servers.oe.position\": 0,\n    // disable the first use junk dialog\n    \"mailnews.ui.junk.firstuse\": false,\n    // other unknown voodoo\n    // -- dummied up local accounts to stop the account wizard\n    \"mail.account.account1.server\" :  \"server1\",\n    \"mail.account.account2.identities\" :  \"id1\",\n    \"mail.account.account2.server\" :  \"server2\",\n    \"mail.accountmanager.accounts\" :  \"account1,account2\",\n    \"mail.accountmanager.defaultaccount\" :  \"account2\",\n    \"mail.accountmanager.localfoldersserver\" :  \"server1\",\n    \"mail.identity.id1.fullName\" :  \"Tinderbox\",\n    \"mail.identity.id1.smtpServer\" :  \"smtp1\",\n    \"mail.identity.id1.useremail\" :  \"tinderbox@invalid.com\",\n    \"mail.identity.id1.valid\" :  true,\n    \"mail.root.none-rel\" :  \"[ProfD]Mail\",\n    \"mail.root.pop3-rel\" :  \"[ProfD]Mail\",\n    \"mail.server.server1.directory-rel\" :  \"[ProfD]Mail/Local Folders\",\n    \"mail.server.server1.hostname\" :  \"Local Folders\",\n    \"mail.server.server1.name\" :  \"Local Folders\",\n    \"mail.server.server1.type\" :  \"none\",\n    \"mail.server.server1.userName\" :  \"nobody\",\n    \"mail.server.server2.check_new_mail\" :  false,\n    \"mail.server.server2.directory-rel\" :  \"[ProfD]Mail/tinderbox\",\n    \"mail.server.server2.download_on_biff\" :  true,\n    \"mail.server.server2.hostname\" :  \"tinderbox\",\n    \"mail.server.server2.login_at_startup\" :  false,\n    \"mail.server.server2.name\" :  \"tinderbox@invalid.com\",\n    \"mail.server.server2.type\" :  \"pop3\",\n    \"mail.server.server2.userName\" :  \"tinderbox\",\n    \"mail.smtp.defaultserver\" :  \"smtp1\",\n    \"mail.smtpserver.smtp1.hostname\" :  \"tinderbox\",\n    \"mail.smtpserver.smtp1.username\" :  \"tinderbox\",\n    \"mail.smtpservers\" :  \"smtp1\",\n    \"mail.startup.enabledMailCheckOnce\" :  true,\n    \"mailnews.start_page_override.mstone\" :  \"ignore\"\n};\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/cmd.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar utils = require(\"../lib/utils\");\nvar console = utils.console;\n\nvar DEBUG_VALUES = [\"binary\", \"verbose\", \"binaryArgs\", \"overload\", \"profile\"];\n\nfunction prepare(mode, program, actionCallback) {\n  return function(commanderOptions) {\n    return utils.getManifest({\n      addonDir: program.addonDir\n    }).then(function(manifest) {\n      validateProgram(program);\n      console.log(\"Starting jpm \" + mode + \" on \" +\n                  (manifest.title || manifest.name));\n      return actionCallback(manifest, commanderOptions);\n    });\n  };\n}\nexports.prepare = prepare;\n\nfunction isEmptyCommand(program) {\n  if (!program.args.length) {\n    return true;\n  }\n  if (!program.args.filter(function(a) {\n    return typeof a === \"object\";\n  }).length) {\n    return true;\n  }\n  return false;\n}\nexports.isEmptyCommand = isEmptyCommand;\n\nfunction validateProgram(program) {\n  Object.keys(program).filter(function(option) {\n    return ~DEBUG_VALUES.indexOf(option);\n  }).forEach(function(option) {\n    if (program.verbose) {\n      console.log(typeof program[option] !== \"boolean\" ?\n        (option + \" set to \" + program[option]) :\n        (option + \" set\"));\n    }\n    if (program.overload && (!process.env.JETPACK_ROOT &&\n                             typeof program.overload === \"boolean\")) {\n      console.warn(\n        \"`overload` flag specified, but no `JETPACK_ROOT` environment \" +\n          \"variable set. Using built in Firefox SDK instead.\");\n    }\n  });\n}\nexports.validateProgram = validateProgram;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/utils.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar _ = require(\"lodash\");\nvar getID = require(\"jetpack-id\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar tmp = require(\"tmp\");\nvar when = require(\"when\");\nvar nodefn = require(\"when/node\");\nvar DecompressZip = require(\"decompress-zip\");\nvar xml2js = require(\"xml2js\");\n\n/**\n * Exports a `console` object that has several methods\n * similar to a traditional console like `log`, `warn`, `error`,\n * and `verbose`, which feed through a simple logging messenger.\n *\n * @param {String} type\n * @param {String} messages...\n */\nfunction log(type) {\n  var messages = Array.prototype.slice.call(arguments);\n  messages.shift();\n  // Concatenate default strings and first message argument into\n  // one string so we can use `printf`-like replacement\n  var first = \"JPM [\" + type + \"] \" + (messages.shift() + \"\");\n\n  if (process.env.NODE_ENV !== \"test\") {\n    console.log.apply(console, [first].concat(messages)); // eslint-disable-line no-console\n  }\n}\n\nvar jpmConsole = {\n  info: log.bind(null, \"info\"),\n  log: log.bind(null, \"info\"),\n  warn: log.bind(null, \"warning\"),\n  error: log.bind(null, \"error\"),\n  debug: log.bind(null, \"debug\")\n};\n\nexports.console = Object.freeze(jpmConsole);\n\n/**\n * Returns the `package.json` manifest as an object\n * from the `cwd`, or `null` if not found.\n * If you pass in an optional XPI filename, the manifest will be returned\n * from this directory after a temporary XPI extraction.\n *\n * @param {Object} options\n *        - `addonDir` directory of the add-on source code, defaulting\n *          to the working directory.\n *        - `xpiPath` a path to an XPI file where the manifest resides.\n *          Without this, the current working directory is assumed.\n * @return {Promise} resolves to a manifest object\n */\nfunction getManifest(options) {\n  options = _.assign({\n    addonDir: process.cwd(),\n    xpiPath: null\n  }, options);\n  return when.promise(function(resolve, reject) {\n    if (options.xpiPath) {\n      return getXpiInfo(options.xpiPath)\n        .then(function(xpiInfo) {\n          resolve(xpiInfo.manifest);\n        })\n        .catch(reject);\n    } else {\n      var json = path.join(options.addonDir, \"package.json\");\n      var manifest = {};\n      try {\n        manifest = require(json);\n      } catch (e) {} // eslint-disable-line no-empty\n\n      return resolve(manifest);\n    }\n  });\n}\nexports.getManifest = getManifest;\n\nfunction getXpiInfoFromManifest(manifest) {\n  return when({\n    manifest: manifest,\n    id: getID(manifest),\n    version: manifest.version,\n  });\n}\nexports.getXpiInfoFromManifest = getXpiInfoFromManifest;\n\n/**\n * Returns a promise that resolves with an info object about an XPI file.\n *\n * @param {String} xpiPath - path to the XPI file\n * @return {Object} xpiInfo\n *   - manifest: manifest object, which might be empty.\n *   - id: GUID of the XPI.\n *   - version: version string for the XPI.\n */\nfunction getXpiInfo(xpiPath) {\n  return extractXPI(xpiPath)\n    .then(function(tmpXPI) {\n      var getInfo;\n      var packageFile = path.join(tmpXPI.path, \"package.json\");\n      var installRdfFile = path.join(tmpXPI.path, \"install.rdf\");\n\n      if (fileExists(packageFile)) {\n        getInfo = getXpiInfoFromManifest(require(packageFile));\n      } else if (fileExists(installRdfFile)) {\n        getInfo = nodefn.call(fs.readFile, installRdfFile)\n          .then(function(data) {\n            return getXpiInfoFromInstallRdf(data);\n          });\n      } else {\n        getInfo = when.reject(\n          new Error(\"Cannot get info: no manifest found in this XPI\"));\n      }\n\n      return getInfo\n        .catch(function(err) {\n          try {\n            tmpXPI.remove();\n          } catch (e) {} // eslint-disable-line no-empty\n          throw err;\n        })\n        .then(function(info) {\n          tmpXPI.remove();\n          return info;\n        });\n    });\n}\nexports.getXpiInfo = getXpiInfo;\n\n/**\n * Takes an `xpiPath` (e.g. filename.xpi), extracts it, and resolves\n * the returned promise with an object to let you work with the\n * temporary directory.\n *\n * The resolution object has the following attributes:\n * - `path`: temporary directory path containing the XPI contents.\n * - `remove()`: method that removes the temporary directory. You must\n *   call this explicitly when you are finished.\n *\n * @param {Object} tmpXPI\n * @return {Promise}\n */\nfunction extractXPI(xpiPath) {\n  return when.promise(function(resolve, reject) {\n    if (!xpiPath) {\n      reject(new Error(\"xpiPath cannot be empty\"));\n    }\n    var stat = fs.statSync(xpiPath);\n    if (!stat.isFile()) {\n      reject(new Error(\"expected an XPI file, got: \" + xpiPath));\n    }\n    tmp.dir(function(err, tmpPath, removeTmpDir) {\n      function cleanUpAndReject(err) {\n        removeTmpDir();\n        reject(err);\n      }\n      if (err) {\n        return cleanUpAndReject(err);\n      }\n\n      var unzipper = new DecompressZip(xpiPath);\n      unzipper.on(\"extract\", function(_log) {\n        resolve({\n          path: tmpPath,\n          remove: removeTmpDir,\n        });\n      });\n      unzipper.on(\"error\", cleanUpAndReject);\n      unzipper.extract({\n        path: tmpPath,\n      });\n    }, {\n      prefix: \"tmp-extracted-xpi-\",\n      // This allows us to remove a non-empty tmp dir.\n      unsafeCleanup: true,\n    });\n  });\n}\nexports.extractXPI = extractXPI;\n\nfunction getXpiInfoFromInstallRdf(installRdf) {\n  var parser = new xml2js.Parser();\n  return nodefn.call(parser.parseString, installRdf)\n    .catch(function(parseError) {\n      parseError.message = \"install.rdf: \" + parseError.message;\n      throw parseError;\n    })\n    .then(function(result) {\n      var info = {\n        manifest: null,\n      };\n      // RDF is one of those sick and twisted XML variants.\n      var root = result.RDF || result[\"RDF:RDF\"];\n\n      if (!root) {\n        throw new Error(\"Could not find root RDF element in install.rdf\");\n      }\n      var descriptions = root.Description || root[\"RDF:Description\"];\n      if (!descriptions) {\n        throw new Error(\"Could not find descriptions in install.rdf\");\n      }\n\n      var foundManifest = false;\n      descriptions.forEach(function(obj) {\n        var about = obj.$.about || obj.$[\"RDF:about\"];\n        if (about !== \"urn:mozilla:install-manifest\") {\n          return;\n        }\n        foundManifest = true;\n\n        // Check for values in properties first then fall back to attributes.\n        // Note that xml2js puts attributes a magical `$`.\n        info.id = obj[\"em:id\"] ? obj[\"em:id\"][0] : null;\n        if (!info.id) {\n          info.id = obj.$[\"em:id\"];\n        }\n        info.version = obj[\"em:version\"] ? obj[\"em:version\"][0] : null;\n        if (!info.version) {\n          info.version = obj.$[\"em:version\"];\n        }\n      });\n\n      if (!foundManifest) {\n        throw new Error(\n            \"Could not find urn:mozilla:install-manifest Description in \" +\n            \"install.rdf\");\n      }\n      if (!info.id) {\n        throw new Error(\"ID was empty in install.rdf\");\n      }\n      if (!info.version) {\n        throw new Error(\"Version was empty in install.rdf\");\n      }\n\n      return info;\n    });\n}\nexports.getXpiInfoFromInstallRdf = getXpiInfoFromInstallRdf;\n\nfunction fileExists(filePath) {\n  try {\n    return fs.statSync(filePath).isFile();\n  } catch (err) {\n    return false;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/firefox.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar defer = require(\"when\").defer;\nvar extend = require(\"lodash\").extend;\nvar console = require(\"./utils\").console;\nvar fxRunner = require(\"fx-runner/lib/run\");\nvar TEST_RESULTS_REGEX = /(\\d+) of (\\d+) tests passed/i;\nvar isTest = process.env.NODE_ENV === \"test\";\nvar GARBAGE = [\n  /\\[JavaScript Warning: \"TypeError: \"[\\w\\d]+\" is read-only\"\\]/,\n  /JavaScript strict warning: /,\n  /\\#\\#\\#\\!\\!\\! \\[Child\\]\\[DispatchAsyncMessage\\]/,\n  /JavaScript strict warning: resource:\\/\\/\\/modules\\/sessionstore\\/SessionStore\\.jsm/, // eslint-disable-line max-len\n  /JavaScript strict warning: resource:\\/\\/gre\\/components\\/nsSearchService\\.js/\n];\n\n/**\n * Takes a manifest object (from package.json) and options,\n * and runs Firefox.\n *\n * @param {Object} manifest\n * @param {Object} options\n *   - `binary` path to Firefox binary to use\n *   - `profile` path to profile or profile name to use\n *   - `binaryArgs` binary arguments to pass into Firefox, split up by spaces\n *   - `verbose` whether or not Firefox should print all of stdout\n * @return {Promise}\n */\nfunction runFirefox(manifest, options) {\n  options = options || {};\n  var runDeferred = defer();\n  var binary = null;\n  var code = 0;\n  var profilePath = options.profile;\n\n  return fxRunner({\n    \"binary\": options.binary,\n    \"no-remote\": true,\n    \"foreground\": true,\n    \"profile\": profilePath,\n    env: extend({}, process.env, require(\"./firefox-env.json\")),\n    verbose: options.verbose,\n    \"binary-args\": options.binaryArgs\n  }).then(function(results) {\n    var firefox = results.process;\n\n    if (options.verbose)  {\n      console.log(\"Executing Firefox binary: \" + results.binary);\n      console.log(\"Executing Firefox with args: \" + results.args);\n    }\n\n    firefox.on(\"error\", function(err) {\n      if (/No such file/.test(err) || err.code === \"ENOENT\") {\n        console.error(\"No Firefox binary found at \" + binary);\n        if (!options.binary) {\n          console.error(\"Specify a Firefox binary to use with the `-b` flag.\");\n        }\n      } else {\n        console.error(err);\n      }\n      runDeferred.reject(err);\n    });\n\n    firefox.on(\"close\", function() {\n      runDeferred.resolve({code: code});\n    });\n\n    firefox.stderr.on(\"data\", function(data) {\n      // Only print out annoying warnings if verbose is on\n      if (/^\\s*System JS : WARNING/.test(data) && options.verbose) {\n        writeWarn(data);\n      }\n      // Otherwise if verbose is on, and we find something, probably a serious error.\n      else if (options.verbose) {\n        writeError(data);\n      }\n    });\n\n    // Many errors in addons are printed to stdout instead of stderr;\n    // we should check for errors here and print them out regardless of\n    // verbose status\n    firefox.stdout.on(\"data\", function(data) {\n      if (isErrorString(data)) {\n        writeError(data);\n      } else {\n        writeLog(data);\n      }\n\n      if (TEST_RESULTS_REGEX.test(data)) {\n        if (RegExp.$1 === RegExp.$2) {\n          code = 0;\n          writeLog(\"All tests passed!\\n\");\n        } else {\n          code = 1;\n          writeLog(\"There were test failures...\\n\");\n        }\n      }\n    });\n\n    return runDeferred.promise;\n  });\n}\nmodule.exports = runFirefox;\n\nfunction isGarbage(data) {\n  return GARBAGE.map(function(filter) {\n    return filter.test(data);\n  }).reduce(function(result, test) {\n    return result || test;\n  }, false);\n}\n\nfunction isErrorString(line) {\n  if (/^\\*{25}/.test(line)) {\n    return true;\n  }\n  if (/^\\s*Message: [\\D]*Error/.test(line)) {\n    return true;\n  }\n  return false;\n}\n\nfunction writeError(s) {\n  if (isGarbage(s)) {\n    return;\n  }\n  if (isTest) {\n    process.stderr.write(s);\n  } else {\n    console.error(s);\n  }\n}\n\nfunction writeLog(s) {\n  if (isGarbage(s)) {\n    return;\n  }\n  process.stdout.write(s);\n}\n\nfunction writeWarn(s) {\n  if (isGarbage(s)) {\n    return;\n  }\n  if (isTest) {\n    process.stdout.write(s);\n  } else {\n    console.warn(s);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/ignore.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar path = require(\"path\");\nvar fs = require(\"fs-promise\");\nvar when = require(\"when\");\nvar Minimatch = require(\"minimatch\").Minimatch;\nvar utils  = require(\"./utils\");\nvar console = utils.console;\n\n/**\n * Look for .jpmignore in the given directory and use it to filter files\n * and sub-directories fallback to use default filter rules if .jpmignore\n * doesn't exist.\n *\n * @param {String} dir\n * @param {Object} options\n * @return {Promise}\n */\nfunction ignore(dir, options) {\n  var jpmignore = path.join(dir, \".jpmignore\");\n  var defaultRules = [\"*.zip\", \".*\", \"test/\", \".jpmignore\", \"*.xpi\"];\n\n  return utils.getManifest({addonDir: options.addonDir})\n    .then(function(manifest) {\n      return fs.exists(jpmignore);\n    })\n    .then(function(exists) {\n      if (exists) {\n        if (options.verbose) {\n          console.log(\".jpmignore found\");\n        }\n        return fs.stat(jpmignore)\n          .then(function(stat) {\n            if (stat.isFile()) {\n              return fs.readFile(jpmignore)\n                .then(function(data) {\n                  return data.toString().replace(/[\\r\\n]/, \"\\n\").split(\"\\n\");\n                });\n            } else {\n              console.warn(\n                \".jpmignore is not a file, fallback to use \" +\n                  \"default filter rules\");\n              return defaultRules;\n            }\n          });\n      } else {\n        if (options.verbose) {\n          console.warn(\n            \".jpmignore does not exist, fallback to use default filter rules\");\n        }\n        return defaultRules;\n      }\n    })\n    .then(function(lines) {\n      // Add \"manifest.json\" to always exclude it from the xpi (See\n      // https://github.com/mozilla-jetpack/jpm/pull/566 for rationale),\n      // but ensure the \"webextension/manifest.json\", that is used for the\n      // webextension embedded in an SDK hybrid add-on, is always included\n      // (See https://github.com/mozilla-jetpack/jpm/pull/578 for rationale).\n      lines = [\"manifest.json\", \"!webextension/manifest.json\"].concat(lines);\n\n      var rules = lines.filter(function(e) {\n        // exclude blank lines and comments\n        return !/^\\s*(#|$)/.test(e);\n      });\n      // http://git-scm.com/docs/gitignore\n      // the last matching pattern decides the outcome\n      // reverse rules and break at first matched rule when filtering\n      return rules.reverse().map(function(rule) {\n        return new Minimatch(rule, {\n          matchBase: true,\n          dot: true,\n          flipNegate: true\n        });\n      });\n    })\n    .then(function(rules) {\n      return listdir(dir, rules, dir, true);\n    });\n}\nmodule.exports = ignore;\n\n/**\n * filter a dir based on filter rules\n *\n * @param {String}  dir\n * @param {Array}   rules\n * @param {Array}   root\n * @param {Boolean} included\n * @return {Promise}\n */\nfunction listdir(dir, rules, root, included) {\n  return fs.readdir(dir)\n  .then(function(files) {\n    return when.all(files.map(function(f) {\n      f = path.join(dir, f);\n      return when(fs.stat(f), function(stat) {\n        return {\n          path: f,\n          isDirectory: stat.isDirectory()\n        };\n      });\n    }));\n  })\n  .then(function(arr) {\n    var files = [];\n    var subdirs = [];\n    arr.forEach(function(e) {\n      if (e.isDirectory) {\n        subdirs.push(e.path);\n      } else {\n        files.push(e.path);\n      }\n    });\n    files = files.filter(function(f) {\n      return filter(f, rules, root, false, included);\n    });\n    return when.all(subdirs.map(function(d) {\n      return listdir(d, rules, root, filter(d, rules, root, true, included));\n    }))\n    .then(function(list) {\n      list = list.reduce(function(ret, i) {\n        return ret.concat(i);\n      }, files);\n      // include current dir only if at least one of its children is included\n      if (list.length > 0) {\n        list.push(dir);\n      }\n      return list;\n    });\n  });\n}\n\n/**\n * check if a given file or dir should be kept\n *\n * @param {String}  p\n * @param {Array}   rules\n * @param {String}  root\n * @param {Boolean} isDirectory\n * @param {Boolean} included\n * @return {Boolean}\n */\nfunction filter(p, rules, root, isDirectory, included) {\n  p = path.relative(root, p);\n  for (var i in rules) {\n    var rule = rules[i];\n    if (isDirectory) {\n      if (rule.match(p) || rule.match(\"/\" + p) ||\n          rule.match(p + \"/\") || rule.match(\"/\" + p + \"/\")\n         ) {\n        return rule.negate;\n      }\n    } else {\n      if (rule.match(p) || rule.match(\"/\" + p)) {\n        return rule.negate;\n      }\n    }\n  }\n  return included;\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/init-input.js":"/* global prompt */\n\n/* NOTE: This file is sort of JavaScript, but really it's parsed by\n * promzard in lib/init.js. That's why it uses a \"prompt\" function\n * that's never been defined, but still works.\n * See: https://github.com/npm/promzard#usage\n */\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar path = require(\"path\");\nvar MIN_VERSION = require(\"./settings\").MIN_VERSION;\nvar semver = require(\"semver\");\n\nmodule.exports = {\n  \"title\": prompt(\"title\", \"My Jetpack Addon\", identity),\n  \"name\": prompt(\"name\",\n                 sanitizeName(\n                   path.basename(process.cwd())), sanitizeName),\n  \"version\": prompt(\"version\", \"0.0.1\", sanitizeVersion),\n  \"description\": prompt(\"description\", \"A basic add-on\", identity),\n  \"main\": prompt(\"entry point\", \"index.js\", identity),\n  \"author\": prompt(\"author\", \"\", identity),\n  \"engines\": prompt(\"engines (comma separated)\",\n                    \"firefox,fennec\", splitObject),\n  \"license\": prompt(\"license\", \"MIT\", identity)\n};\n\n/**\n * Returns the argument passed into it.\n *\n * @param {Mixed} x\n * @return {Mixed}\n */\n\nfunction identity(x) {\n  return x;\n}\n\n/**\n * Takes a string and filters out anything that is not\n * a letter, number, or dash (-) and casts to lower case.\n *\n * @param {String} name\n * @return {String}\n */\n\nfunction sanitizeName(name) {\n  name = name || \"\";\n  return name.replace(/[^\\w-]|_/g,\"\").toLowerCase();\n}\n\n/**\n * Takes a version string ('1.0.4') and ensures it is a valid semver\n * string. Does not accept ambiguous semver strings like '>= 0.4.x', and\n * the like.\n *\n * @param {String} version\n * @return {String}\n */\n\nfunction sanitizeVersion(version) {\n  return semver.valid(version) || \"0.0.0\";\n}\n\n/**\n * Takes a comma-separated string and returns an object with each\n * value in the string a property of the object with a '*' value\n *\n * @param {String} input\n * @return {Object}\n */\n\nfunction splitObject(input) {\n  return input.split(\",\").reduce(function(obj, value) {\n    obj[value.trim()] = \">=\" + MIN_VERSION;\n    return obj;\n  }, {});\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/settings.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\n// Set minimum version to 38.0a1, because some SDK changes are necessary.\n// Must be \"38.0a1\", as 38.0a1 < 38.0 according to how Firefox does versioning\nexports.MIN_VERSION = \"38.0a1\";\n// Set a MAX_VERSION to use in install.rdf - default MAX_VERSION is \"*\".\n// See this page for supported ranges: https://addons.mozilla.org/en-US/firefox/pages/appversions/\nexports.MAX_VERSION = \"*\";\n\nexports.AMO_API_PREFIX = \"https://addons.mozilla.org/api/v3\";\n\nexports.ids = {\n  FIREFOX: \"{ec8030f7-c20a-464f-9b0e-13a3a9e97384}\",\n  MOZILLA: \"{86c18b42-e466-45a9-ae7a-9b95ba6f5640}\",\n  SUNBIRD: \"{718e30fb-e89b-41dd-9da7-e25a45638b28}\",\n  SEAMONKEY: \"{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}\",\n  FENNEC: \"{aa3c5121-dab2-40e2-81ca-7ea25febc110}\",\n  THUNDERBIRD: \"{3550f703-e582-4d05-9a08-453d09bdfdc6}\"\n};\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/init.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar os = require(\"os\");\nvar promzard = require(\"promzard\");\nvar fs = require(\"fs-promise\");\nvar read = require(\"read\");\nvar when = require(\"when\");\nvar join = require(\"path\").join;\nvar initInput = require.resolve(\"./init-input\");\nvar console = require(\"./utils\").console;\n\nvar SOURCE_INDEX = join(__dirname, \"../data/index.js\");\nvar SOURCE_TEST = join(__dirname, \"../data/test-index.js\");\n\nvar packageDataTemp;\n\nfunction init(options) {\n  var root = process.cwd();\n\n  return createManifest(root)\n    .then(createFiles.bind(null, root))\n    .catch(console.error);\n}\nmodule.exports = init;\n\nfunction createManifest(root) {\n  return when.promise(function(resolve, reject) {\n    var packagePath = join(root, \"package.json\");\n\n    promzard(initInput, {}, function(err, data) {\n      if (err) {\n        return reject(err);\n      }\n\n      // Set the \"jetpack\" keyword by default\n      data.keywords = [\"jetpack\"];\n\n      // convert to json string which a human can read\n      data = JSON.stringify(data, null, 2) + \"\\n\";\n\n      packageDataTemp = JSON.parse(data);\n      console.log(\"About to write to %s:\\n\\n%s\\n\", packagePath, data);\n      read({\n        prompt: \"Is this ok? \",\n        default: \"yes\"\n      }, function(err, ok) {\n        if (!ok || ok.toLowerCase().charAt(0) !== \"y\") {\n          return reject(\"Aborted.\");\n        } else {\n          fs.writeFile(packagePath, data, \"utf-8\").then(resolve, reject);\n        }\n      });\n    });\n  });\n}\n\nfunction createFiles(root) {\n  var indexPath = join(root, \"index.js\");\n  var readmePath = join(root, \"README.md\");\n  var testDirPath = join(root, \"test\");\n  var testPath = join(testDirPath, \"test-index.js\");\n\n  return fs.exists(indexPath).then(function(exists) {\n    return (exists) ? null : fs.copy(SOURCE_INDEX, indexPath);\n  })\n  .then(function() {\n    return fs.exists(readmePath);\n  })\n  .then(function(exists) {\n    return (exists) ? null : fs.writeFileSync(\n      readmePath,\n      \"#\" + packageDataTemp.title + os.EOL + packageDataTemp.description);\n  })\n  .then(function() {\n    return fs.mkdirp(testDirPath);\n  })\n  .then(function() {\n    return fs.exists(testPath);\n  })\n  .then(function(exists) {\n    return (exists) ? null : fs.copy(SOURCE_TEST, testPath);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/post.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar extend = require(\"lodash\").extend;\nvar xpi = require(\"./xpi\");\nvar fs = require(\"fs\");\nvar url = require(\"url\");\nvar net = require(\"net\");\nvar when = require(\"when\");\nvar utils = require(\"./utils\");\nvar logger = utils.console;\n\nfunction postXPI(manifest, options) {\n  var postURL = options.postUrl;\n\n  return xpi(manifest, extend(options, {\n    skipUpdateRDF: true\n  })).then(function(xpiPath) {\n    return when.promise(function(resolve, reject) {\n      fs.readFile(xpiPath, function(err, buffer) {\n        var p = url.parse(postURL);\n        var client = net.connect({\n          host: p.hostname,\n          port: p.port\n        }, function() {\n          var identifier = new Buffer(\n            \"\\rPOST / HTTP/1.1\\n\\rUser-Agent: NodeJS Compiler\\n\\r\\n\");\n          client.write(identifier);\n          client.end(buffer);\n        });\n        client.on(\"data\", function(data) {\n          // Extension Auto-Installer does not close the connection,\n          // so we do it after 500ms\n          setTimeout(function() {\n            client.destroy();\n          }, 500);\n        });\n        client.on(\"error\", function(e) {\n          // if net errors need to be propagated.\n          reject(e);\n        });\n        client.on(\"close\", function(hadError) {\n          if (hadError) {\n            logger.error(\"Posting XPI to \" + postURL + \" failed\");\n          } else {\n            logger.info(\"Posted XPI to \" + postURL);\n          }\n          fs.unlink(xpiPath);\n          logger.info(\"Removed XPI from \" + xpiPath);\n          resolve();\n        });\n      });\n    });\n  }).then(null, function(err) {\n    console.error(err); // eslint-disable-line no-console\n  });\n}\nmodule.exports = postXPI;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/xpi.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar join = require(\"path\").join;\nvar getID = require(\"jetpack-id\");\nvar validate = require(\"./validate\");\nvar utils = require(\"./xpi/utils\");\nvar console = require(\"./utils\").console;\nvar _ = require(\"lodash\");\n\n/**\n * Takes a manifest object (from package.json) and build options\n * object and zipz up the current directory into a XPI, copying\n * over default `install.rdf` and `bootstrap.js` if needed\n * and not yet defined. Returns a promise that resolves\n * upon completion.\n *\n * @param {Object} manifest\n * @param {Object} options\n *   - `destDir` Directory path where xpi should be saved.\n *   - `xpiPath` Legacy alias for `destDir`. Used by `run` and `test` to\n *               save the xpi to a temp directory.\n * @return {Promise}\n */\n\nfunction xpi(manifest, options) {\n  options = options || {};\n  var addonDir = options.addonDir || process.cwd();\n  var xpiVersion = manifest.version ? (\"-\" + manifest.version) : \"\";\n  var xpiName;\n  if (manifest.name) {\n    // checking that the name only contains save characters for any file system:\n    //   alphanumerics, dash, underscore, dot and at\n    if (manifest.name.match(/^[a-z0-9_\\-\\.@]+$/i)) {\n      xpiName = manifest.name;\n    } else {\n      console.warn(\n        \"The provided addon name \\\"\" +\n        manifest.name +\n        \"\\\" is not a valid filename. Using ID instead.\"\n      );\n    }\n  }\n  if (!xpiName) {\n    xpiName = getID(manifest) + xpiVersion;\n  }\n  xpiName += \".xpi\";\n  var updateRdfName = getID(manifest) + xpiVersion + \".update.rdf\";\n  var outputPath = options.xpiPath || options.destDir || addonDir;\n  var xpiPath = join(outputPath, xpiName);\n  var updateRdfPath = join(outputPath, updateRdfName);\n\n  options = _.merge(options, {\n    addonDir: addonDir,\n    xpiName: xpiName,\n    xpiPath: xpiPath,\n    useFallbacks: true,\n    needsInstallRDF: undefined,\n    needsBootstrapJS: undefined,\n    bootstrapSrc: require.resolve(\"jpm-core/data/bootstrap.js\")\n  });\n\n  return utils.checkNeedsFallbacks(options)\n    .then(function() {\n      if (options.needsBootstrapJS || options.needsInstallRDF) {\n        if (options.verbose) {\n          console.log(\"Validating the manifest\");\n        }\n        return validate(options.addonDir);\n      }\n      return null;\n    })\n    .then(function() {\n      return utils.createFallbacks(options);\n    })\n    .then(function(fallbacks) {\n      options.fallbacks = fallbacks;\n      if (options.verbose) {\n        console.log(\"Creating XPI\");\n      }\n      return utils.createZip(options);\n    })\n    .then(function() {\n      return utils.createUpdateRDF(options, updateRdfPath);\n    })\n    .then(function() {\n      if (options.verbose) {\n        console.log(\"Created XPI at \" + xpiPath);\n      }\n      return xpiPath;\n    });\n}\nmodule.exports = xpi;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/validate.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar when = require(\"when\");\nvar jetpackValidation = require(\"jetpack-validation\");\nvar console = require(\"./utils\").console;\n\nvar ERRORS = [\"main\", \"id\", \"parsing\"];\nvar WARNINGS = [\"version\", \"title\", \"name\", \"webextensionManifestFound\"];\n\nfunction validate(dir) {\n  var errors = jetpackValidation(dir);\n\n  return when.promise(function(resolve, reject) {\n    Object.keys(errors).forEach(function(errorType) {\n      if (~ERRORS.indexOf(errorType)) {\n        reject(new Error(errors[errorType]));\n      }\n      if (~WARNINGS.indexOf(errorType)) {\n        console.warn(errors[errorType]);\n      }\n    });\n    resolve();\n  });\n}\n\nmodule.exports = validate;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/xpi/utils.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar join = require(\"path\").join;\nvar when = require(\"when\");\nvar fs = require(\"fs-promise\");\nvar Zip = require(\"jszip\");\n\nvar RDF = require(\"../rdf\");\nvar zip = require(\"../zip\");\nvar console = require(\"../utils\").console;\nvar getManifest = require(\"../utils\").getManifest;\n\nfunction getData(xml, tag) {\n  tag = xml.getElementsByTagName(tag)[0];\n\n  if (tag) {\n    return tag.childNodes[0].data;\n  }\n\n  return undefined;\n}\nexports.getData = getData;\n\nfunction checkNeedsFallbacks(options) {\n  var rdfPath = join(options.addonDir, \"install.rdf\");\n  var bsPath = join(options.addonDir, \"bootstrap.js\");\n\n  if (!options.useFallbacks) {\n    options.needsInstallRDF = false;\n    options.needsBootstrapJS = false;\n\n    return when.resolve();\n  }\n\n  if (options.useFallbacks && options.verbose) {\n    console.log(\"Checking compatability bootstrap.js and install.rdf for xpi\");\n  }\n\n  function checkForBootstrap() {\n    return fs.exists(bsPath).then(function(exists) {\n      if (exists) {\n        console.warn(\"Using existing bootstrap.js. \" +\n                     \"This file is usually auto-generated.\");\n      }\n\n      options.needsBootstrapJS = !exists;\n    });\n  }\n\n  return fs.exists(rdfPath).then(function(exists, a2) {\n    options.needsInstallRDF = !exists;\n\n    if (exists) {\n      console.warn(\"Using existing install.rdf. \" +\n                   \"This file is usually auto-generated.\");\n\n      var needsBootstrap = !options.retro;\n      return needsBootstrap ? checkForBootstrap() : null;\n    }\n\n    return checkForBootstrap();\n  });\n}\nexports.checkNeedsFallbacks = checkNeedsFallbacks;\n\n// Creates bootstrap.js/install.rdf\nfunction createFallbacks(options) {\n  var bootstrapSrc = options.bootstrapSrc;\n\n  if (options.useFallbacks && options.verbose) {\n    console.log(\"Creating fallbacks if they are necessary..\");\n  }\n\n  return getManifest({\n    addonDir: options.addonDir\n  }).then(function(manifest) {\n    return when.all([\n      options.needsInstallRDF ? when.resolve(\n        RDF.createRDF(manifest, options.needsBootstrapJS)) : when.resolve(),\n      options.needsBootstrapJS ? when.resolve(\n        fs.readFile(bootstrapSrc)) : when.resolve(),\n    ]).then(function(fallbacks) {\n      if (fallbacks) {\n        return {\n          installRDF: fallbacks[0],\n          bootstrapJS: fallbacks[1]\n        };\n      }\n    });\n  });\n}\nexports.createFallbacks = createFallbacks;\n\nfunction createZip(options) {\n  var dir = options.addonDir;\n\n  if (options.verbose) {\n    console.log(\"Zipping up files...\");\n  }\n\n  return zip(options, dir, options.xpiPath).then(function(result) {\n    var fallbacks = options.fallbacks;\n\n    if (!fallbacks || (!fallbacks.installRDF && !fallbacks.bootstrapJS)) {\n      // return the zip file if there isn't any needed fallback file\n      return result;\n    }\n\n    return fs.readFile(options.xpiPath).then(function(data) {\n      // add the needed fallbacks files into the zip file\n      var zip = new Zip(data);\n\n      if (options.verbose && (fallbacks.installRDF || fallbacks.bootstrapJS)) {\n        console.log(\"Inject bootstrap.js and install.rdf in \" +\n                    options.xpiPath);\n      }\n\n      if (fallbacks.installRDF) {\n        zip.file(\"install.rdf\", fallbacks.installRDF);\n      }\n\n      if (fallbacks.bootstrapJS) {\n        zip.file(\"bootstrap.js\", fallbacks.bootstrapJS);\n      }\n\n      var buffer = zip.generate({type: \"nodebuffer\",\n                                 compression: \"DEFLATE\",\n                                 compressionOptions: {level: 6}});\n\n      return fs.writeFile(result, buffer).then(function() {\n        return result;\n      });\n    });\n  });\n}\nexports.createZip = createZip;\n\nfunction createUpdateRDF(options, updateRdfPath) {\n  var deferred = when.defer();\n\n  if (options.verbose) {\n    console.log(\"Creating updateRDF...\");\n  }\n  return getManifest({addonDir: options.addonDir}).then(function(manifest) {\n    if (!manifest.updateLink || options.skipUpdateRDF) {\n      return;\n    }\n    if (!/^https/.test(manifest.updateLink)) {\n      deferred.reject(\"UpdateLink must start with 'https': \" +\n                      manifest.updateLink);\n      return deferred.promise;\n    }\n    return fs.writeFile(\n      updateRdfPath, RDF.createUpdateRDF(manifest)).then(function() {\n        console.log(\"updateRDF created at \" + updateRdfPath);\n        deferred.resolve();\n        return deferred.promise;\n      });\n  });\n}\nexports.createUpdateRDF = createUpdateRDF;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/rdf.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar jsontoxml = require(\"jsontoxml\");\nvar getID = require(\"jetpack-id\");\nvar parse = require(\"mozilla-toolkit-versioning\").parse;\nvar GUIDS = require(\"./settings\").ids;\nvar MIN_VERSION = require(\"./settings\").MIN_VERSION;\nvar MAX_VERSION = require(\"./settings\").MAX_VERSION;\n\nvar UUID_PATTERN = /^\\{([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\\}$/; // eslint-disable-line max-len\n\n// Copied from mozilla-central/addon-sdk/source/lib/sdk/bootstrap.js\nfunction realDomain(id) {\n  return id.lastIndexOf(\"@\") === 0 ? id.substr(1).toLowerCase() :\n    id.toLowerCase().\n      replace(/@/g, \"-at-\").\n      replace(/\\./g, \"-dot-\").\n      replace(UUID_PATTERN, \"$1\");\n}\n\n/**\n * Creates an `install.rdf` file based off of an addon's `package.json`\n * object manifest. Returns a string of the composed RDF file.\n *\n * @param {Object} manifest\n * @return {String}\n */\n\nfunction createRDF(manifest, needsBootstrapJS) {\n  var header = [{\n    name: \"RDF\",\n    attrs: {\n      \"xmlns\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n      \"xmlns:em\": \"http://www.mozilla.org/2004/em-rdf#\"\n    },\n    children: []\n  }];\n  var description = {\n    name: \"Description\",\n    attrs: {\n      \"about\": \"urn:mozilla:install-manifest\"\n    },\n    children: []\n  };\n\n  var icon = manifest.icon || {};\n  if (typeof icon === \"string\") {\n    icon = {\n      \"32\": icon\n    };\n  }\n\n  var jetpackMeta = {\n    \"em:id\": getID(manifest),\n    \"em:type\": \"2\",\n    \"em:bootstrap\": true,\n    \"em:unpack\": manifest.unpack === true,\n    \"em:version\": manifest.version || \"0.0.0\",\n    \"em:name\": manifest.title || manifest.name || \"Untitled\",\n    \"em:description\": manifest.description || undefined,\n    \"em:creator\": formatAuthor(manifest.author),\n    \"em:homepageURL\": manifest.homepage || undefined,\n    \"em:updateURL\": manifest.updateURL || undefined,\n    \"em:updateKey\": manifest.updateKey || undefined,\n    \"em:iconURL\": icon[\"48\"] || icon[\"32\"] || undefined,\n    \"em:icon64URL\": icon[\"64\"] || undefined\n  };\n\n  // these values are used by default so using them\n  // in the install.rdf is not useful\n  if (jetpackMeta[\"em:iconURL\"] === \"icon.png\") {\n    delete jetpackMeta[\"em:iconURL\"];\n  }\n  if (jetpackMeta[\"em:icon64URL\"] === \"icon64.png\") {\n    delete jetpackMeta[\"em:icon64URL\"];\n  }\n\n  /*\n   * When bootstrap.js is not provided by the addon developer, the default\n   * bootstrap.js is used. With this bootstrap.js, the addon's resource:// URI\n   * registration occurs in resource://gre/modules/commonjs/sdk/addon/bootstrap.js.\n   * If a custom bootstrap.js is provided, the program flow mentioned above may\n   * not occur, so the real icon URLs are unknow.\n   **/\n  if (needsBootstrapJS) {\n    [\"em:iconURL\", \"em:icon64URL\"].forEach(function(key) {\n      if (jetpackMeta[key] && jetpackMeta[key].indexOf(\"://\") === -1) {\n        var domain = realDomain(jetpackMeta[\"em:id\"]);\n        jetpackMeta[key] = \"resource://\" + domain + \"/\" + jetpackMeta[key];\n      }\n    });\n  }\n\n  if (manifest.preferences && !manifest.preferencesURL) {\n    jetpackMeta[\"em:optionsURL\"] = \"data:text/xml,<placeholder/>\";\n    jetpackMeta[\"em:optionsType\"] = 2;\n  } else if (manifest.preferencesURL) {\n    jetpackMeta[\"em:optionsURL\"] = manifest.preferencesURL;\n    jetpackMeta[\"em:optionsType\"] = 3;\n  }\n\n  if (manifest.permissions && manifest.permissions.multiprocess !== undefined) {\n    var supportsMultiprocess = manifest.permissions.multiprocess;\n    jetpackMeta[\"em:multiprocessCompatible\"] = supportsMultiprocess;\n  }\n\n  if (manifest.hasEmbeddedWebExtension) {\n    jetpackMeta[\"em:hasEmbeddedWebExtension\"] = true;\n  }\n\n  header[0].children.push(description);\n\n  // clean jetpackMeta\n  description.children.push(cleanMetadata(jetpackMeta));\n\n  if (manifest.developers) {\n    aboutDeveloper(description.children, manifest.developers);\n  }\n\n  if (manifest.translators) {\n    aboutTranslator(description.children, manifest.translators);\n  }\n\n  if (manifest.contributors) {\n    aboutContributor(description.children, manifest.contributors);\n  }\n\n  var engines = Object.keys(manifest.engines || {});\n\n  // If engines defined, use them\n  if (engines.length) {\n    engines.forEach(function(engine) {\n      description.children.push(createApplication(\n        engine, manifest.engines[engine]));\n    });\n  }\n  // Otherwise, assume default Firefox support\n  else {\n    description.children.push(createApplication(\"Firefox\"));\n  }\n\n  if (manifest.locales) {\n    for (var locale in manifest.locales) {\n      var l10n = manifest.locales[locale];\n      var l10nDescription = [];\n\n      var l10nMeta = {\n        \"em:locale\": locale,\n        \"em:name\": l10n.title || jetpackMeta[\"em:name\"],\n        \"em:description\": l10n.description || jetpackMeta[\"em:description\"],\n        \"em:creator\": jetpackMeta[\"em:creator\"],\n        \"em:homepageURL\": l10n.homepage || jetpackMeta[\"em:homepageURL\"]\n      };\n\n      // clean l10nMeta\n      l10nDescription.push(cleanMetadata(l10nMeta));\n\n      if (manifest.developers) {\n        aboutDeveloper(l10nDescription, manifest.developers);\n      }\n\n      if (manifest.translators) {\n        aboutTranslator(l10nDescription, manifest.translators);\n      }\n\n      if (manifest.contributors) {\n        aboutContributor(l10nDescription, manifest.contributors);\n      }\n\n      description.children.push({\n        \"em:localized\": {\n          \"Description\": l10nDescription\n        }\n      });\n    }\n  }\n\n  var xml = jsontoxml(header, {\n    prettyPrint: true,\n    xmlHeader: true,\n    indent: \"  \",\n    escape: true\n  });\n\n  return xml;\n}\nexports.createRDF = createRDF;\n\n/**\n * Creates an `update.rdf` file based off of an addon's `package.json`\n * object manifest. Returns a string of the composed RDF file.\n *\n * @param {Object} manifest\n * @return {String}\n */\n\nfunction createUpdateRDF(manifest) {\n  var header = [{\n    name: \"RDF\",\n    attrs: {\n      \"xmlns\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n      \"xmlns:em\": \"http://www.mozilla.org/2004/em-rdf#\"\n    },\n    children: []\n  }];\n  var description = {\n    name: \"Description\",\n    attrs: {\n      \"about\": \"urn:mozilla:extension:\" + getID(manifest)\n    },\n    children: []\n  };\n  var enginesDescription = {\n    name: \"Description\",\n    children: []\n  };\n  var updateRdfTree = {\n    name: \"em:updates\",\n    children: [\n      {\n        name: \"Seq\",\n        children: [\n          {\n            name: \"li\",\n            children: []\n          }\n        ]\n      }\n    ]\n  };\n\n  var jetpackMeta = {\n    \"em:version\": manifest.version || \"0.0.0\"\n  };\n  enginesDescription.children.push(jetpackMeta);\n\n  var engines = Object.keys(manifest.engines || {});\n  // If engines defined, use them\n  if (engines.length) {\n    engines.forEach(function(engine) {\n      enginesDescription.children.push(createApplication(\n        engine, manifest.engines[engine]));\n    });\n  }\n  // Otherwise, assume default Firefox support\n  else {\n    enginesDescription.children.push(createApplication(\"Firefox\"));\n  }\n  //we add the updateLink for each engine\n  enginesDescription.children.forEach(function(descriptionData, index) {\n    if (descriptionData.hasOwnProperty(\"em:targetApplication\")) {\n      enginesDescription.children[index][Object.keys(descriptionData)].\n        Description[\"em:updateLink\"] = manifest.updateLink;\n    }\n  });\n\n  updateRdfTree.children[0].children[0].children.push(enginesDescription);\n  description.children.push(updateRdfTree);\n  header[0].children.push(description);\n\n  var xml = jsontoxml(header, {\n    prettyPrint: true,\n    xmlHeader: true,\n    indent: \"  \",\n    escape: true\n  });\n\n  return xml;\n}\nexports.createUpdateRDF = createUpdateRDF;\n\nfunction getGUID(type) {\n  if (type.match(/^\\{[a-f0-9]{8}-(?:[a-f0-9]{4}-){3}[a-f0-9]{12}\\}$/)) {\n    return type;\n  }\n  return GUIDS[(type = type.toUpperCase())];\n}\n\n/**\n * Formats the package.json's `author` key to pull out the name\n * in the following formats, for use with the `em:creator` key in the\n * install.rdf:\n *\n * \"Jordan Santell\"\n * \"Jordan Santell <jsantell@mozilla.com>\"\n * { name: \"Jordan Santell\", email: \"jsantell@mozilla.com\" }\n */\nfunction formatAuthor(author) {\n  if (typeof author === \"object\") {\n    return author.name || undefined;\n  }\n  return author || undefined;\n}\n\nfunction createApplication(type, versions) {\n  var guid = getGUID(type);\n  // If `versions` exists, parse it, otherwise assume defaults\n  var parsed = versions ? parse(versions) : {};\n  if (!guid) {\n    throw new Error(\"Unrecognized application type: \" + type);\n  }\n\n  return {\n    \"em:targetApplication\": {\n      \"Description\": {\n        \"em:id\": guid,\n        \"em:minVersion\": parsed.min || MIN_VERSION,\n        \"em:maxVersion\": parsed.max || MAX_VERSION\n      }\n    }\n  };\n}\n\nfunction cleanMetadata(metadata) {\n  Object.keys(metadata).forEach(function(key) {\n    if (metadata[key] === undefined) {\n      delete metadata[key];\n    }\n  });\n  return metadata;\n}\n\nfunction aboutDeveloper(group, members) {\n  members.forEach(function(member) {\n    group.push({\"em:developer\": member});\n  });\n}\n\nfunction aboutTranslator(group, members) {\n  members.forEach(function(member) {\n    group.push({\"em:translator\": member});\n  });\n}\n\nfunction aboutContributor(group, members) {\n  members.forEach(function(member) {\n    group.push({\"em:contributor\": member});\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/zip.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar path = require(\"path\");\nvar zipdir = require(\"zip-dir\");\nvar when = require(\"when\");\nvar console = require(\"./utils\").console;\nvar ignore = require(\"./ignore\");\n\n/**\n * Takes a directory to zip up and a path to save the\n * zip file on disk. Returns a promise that resolves\n * upon completion.\n *\n * @param {String} dir\n * @param {String} zipPath\n * @return {Promise}\n */\nfunction zip(options, dir, zipPath) {\n  return when(ignore(dir, options))\n  .then(function(includes) {\n    var deferred = when.defer();\n\n    zipdir(dir, {\n      saveTo: zipPath,\n      each: each.bind(null, options),\n      filter: filter.bind(null, options, includes, dir)\n    }, function(err, buffer) {\n      if (err) {\n        deferred.reject(err);\n      } else {\n        deferred.resolve(zipPath);\n      }\n    });\n\n    return deferred.promise;\n  });\n}\nmodule.exports = zip;\n\nfunction each(options, filepath) {\n  if (options.verbose) {\n    console.log(\"Adding: \" + filepath);\n  }\n}\n\n/**\n * Filter for deciding what is included in a xpi based on a list of included files\n */\nfunction filter(options, includes, root, filepath, stat) {\n  var paths = path.relative(root, filepath).split(path.sep);\n  // always include test/tests directory when running jpm test\n  if (options.command === \"test\") {\n    if (/^tests?$/.test(paths[0])) {\n      if (paths.length === 1 && stat.isDirectory()) {\n        return true;\n      }\n      if (paths.length > 1) {\n        return true;\n      }\n    }\n  }\n  return includes.indexOf(filepath) !== -1;\n}\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/profile.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar FirefoxProfile = require(\"firefox-profile\");\nvar FirefoxProfileFinder = require(\"firefox-profile/lib/profile_finder\");\nvar getPrefs = require(\"./preferences\").getPrefs;\nvar when = require(\"when\");\nvar console = require(\"./utils\").console;\n\nfunction copyProfile(profile) {\n  return when.resolve(new FirefoxProfile(profile));\n}\nexports.copyProfile = copyProfile;\n\nfunction reuseProfile(profile) {\n  return when.resolve(new FirefoxProfile({\n    destinationDirectory: profile\n  }));\n}\nexports.reuseProfile = reuseProfile;\n\nfunction makeProfile() {\n  var profile = new FirefoxProfile();\n\n  // Set default preferences\n  var prefs = getPrefs(\"firefox\");\n  Object.keys(prefs).forEach(function(pref) {\n    profile.setPreference(pref, prefs[pref]);\n  });\n  profile.updatePreferences();\n\n  return when.resolve(profile);\n}\nexports.makeProfile = makeProfile;\n\n// Set any of the preferences passed via options.\nfunction addPrefs(profile, options) {\n  var userPrefs = options.prefs || {};\n\n  return when.promise(function(resolve, reject) {\n    Object.keys(userPrefs).forEach(function(key) {\n      profile.setPreference(key, userPrefs[key]);\n    });\n    profile.updatePreferences();\n    resolve(profile);\n  });\n}\nexports.addPrefs = addPrefs;\n\nfunction addExtension(profile, options) {\n  return when.promise(function(resolve, reject) {\n    if (!options.xpi) {\n      resolve(profile);\n      return;\n    }\n\n    profile.addExtension(options.xpi, function() {\n      resolve(profile);\n    });\n  });\n}\nexports.addExtension = addExtension;\n\nfunction convertProfileNameToPath(options) {\n  var name = options.name;\n  var finder = new FirefoxProfileFinder();\n  return when.promise(function(resolve, reject) {\n    finder.getPath(name, function(err, path) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(path);\n      }\n\n      return null;\n    });\n  });\n}\n\nfunction createProfile(options) {\n  options = options || {};\n  var profile = options.profile;\n\n  return when.promise(function(resolve, reject) {\n    // jpm -p .. is used\n    if (profile) {\n      if (options.copy) {\n        console.log(\"Copying provided profile:\");\n      } else {\n        console.log(\"Using provided profile:\");\n      }\n\n      // profile name is provided\n      if (isProfileName(profile)) {\n        return convertProfileNameToPath({name: profile}).\n          then(function(path) {\n            console.log(\"    \" + path);\n            resolve(options.copy ? copyProfile(path) : reuseProfile(path));\n          });\n      }\n\n      // profile path is provided\n      console.log(\"    \" + profile);\n      return resolve(options.copy ? copyProfile(profile) :\n                     reuseProfile(profile));\n    }\n\n    // jpm -p .. was not used\n    console.log(\"Creating a new profile\");\n    return resolve(makeProfile());\n  }).\n  then(function(profile) {\n    if (options.verbose) {\n      console.log(\"Using temporary profile at\");\n      console.log(\"    \" + profile.profileDir);\n    }\n    return profile;\n  }).\n  then(function(profile) {\n    return addPrefs(profile, options);\n  }).\n  then(function(profile) {\n    return addExtension(profile, options);\n  }).\n  then(function(profile) {\n    return profile.profileDir;\n  });\n}\nexports.createProfile = createProfile;\n\n// profiles that do not include \"/\" are treated\n// as profile names to be used by the firefox profile manager\nfunction isProfileName(profile) {\n  if (!profile) {\n    return false;\n  }\n  return !/[\\\\\\/]/.test(profile);\n}\nexports.isProfileName = isProfileName;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/preferences.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar prefs = require(\"../data/preferences\");\nvar extend = require(\"lodash\").extend;\nvar path = require(\"path\");\n\n/**\n * Takes an app string (\"firefox\") and returns the merged preferences\n * of common prefs with app-specific prefs as an object\n *\n * @param {String} app\n * @return {Object}\n */\n\nfunction getPrefs(app) {\n  // Default and only Firefox supported for the moment\n  if (!app) {\n    app = \"firefox\";\n  }\n\n  var appPrefs = prefs[\"DEFAULT_\" + app.toUpperCase() + \"_PREFS\"];\n  var commonPrefs = prefs.DEFAULT_COMMON_PREFS;\n\n  return extend({}, commonPrefs, appPrefs);\n}\nexports.getPrefs = getPrefs;\n\nfunction includePrefs(id, options) {\n  var prefs = options.prefs || {};\n\n  if (options.command) {\n    prefs[\"extensions.\" + id + \".sdk.load.command\"] = options.command;\n  }\n\n  if (options.filter) {\n    prefs[\"extensions.\" + id + \".sdk.test.filter\"] = options.filter;\n  }\n\n  if (options.times) {\n    prefs[\"extensions.\" + id + \".sdk.test.iterations\"] =\n      parseInt(options.times);\n  }\n\n  if (options.doNotQuit) {\n    prefs[\"extensions.\" + id + \".sdk.test.no-quit\"] = true;\n    prefs[\"extensions.\" + id + \".sdk.test.keepOpen\"] = true;\n  }\n\n  if (options.profileMemory) {\n    prefs[\"extensions.\" + id + \".sdk.profile.memory\"] = true;\n  }\n\n  if (options.checkMemory) {\n    prefs[\"extensions.\" + id + \".sdk.profile.leaks\"] = true;\n  }\n\n  if (options.stopOnError) {\n    prefs[\"extensions.\" + id + \".sdk.test.stop\"] = 1;\n  }\n\n  if (options.debug) {\n    prefs[\"extensions.\" + id + \".sdk.debug.show\"] = true;\n  }\n\n  if (options.tbpl) {\n    prefs[\"extensions.\" + id + \".sdk.output.format\"] = \"tbpl\";\n  }\n\n  if (options.verbose) {\n    prefs[\"extensions.\" + id + \".sdk.output.logLevel\"] = \"verbose\";\n  }\n\n  if (options.overload && (process.env.JETPACK_ROOT ||\n                           typeof options.overload === \"string\")\n     ) {\n    var root = (typeof options.overload === \"string\" ?\n      options.overload :\n      process.env.JETPACK_ROOT).split(path.sep);\n    root.push(\"lib\");\n    // Normalize the joining of the path to be fileURI (unix) style,\n    // regardless of OS\n    root = \"file:///\" + path.join.apply(null, root).replace(path.sep, \"/\");\n    prefs[\"extensions.modules.\" + id + \".path.\"] = root;\n  }\n\n  return prefs;\n}\nexports.includePrefs = includePrefs;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/run.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar extend = require(\"lodash\").extend;\nvar execute = require(\"./task\");\n\nfunction run(manifest, options) {\n  return execute(manifest, extend(options, {command: \"run\"}));\n}\nmodule.exports = run;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/task.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar os = require(\"os\");\nvar xpi = require(\"./xpi\");\nvar profile = require(\"./profile\");\nvar runFirefox = require(\"./firefox\");\nvar fs = require(\"fs-promise\");\nvar includePrefs = require(\"./preferences\").includePrefs;\nvar getID = require(\"jetpack-id\");\nvar when = require(\"when\");\nvar path = require(\"path\");\nvar console = require(\"./utils\").console;\n\nfunction extendWith(source, field) {\n  return function(value) {\n    source[field] = value;\n    return source;\n  };\n}\n\nfunction removeXPI(options) {\n  return fs.unlink(options.xpi).then(function() {\n    return options;\n  });\n}\n\nfunction execute(manifest, options) {\n  options = options || {addonDir: process.cwd()};\n  var id = getID(manifest);\n\n  if (~[\"run\", \"test\"].indexOf(options.command)) {\n    options.xpiPath = os.tmpdir();\n  }\n\n  return setupPrefs(id, options)\n    .then(function() {\n      return xpi(manifest, options);\n    })\n    .then(extendWith(options, \"xpi\"))\n    .then(profile.createProfile)\n    .then(extendWith(options, \"profile\"))\n    .then(removeXPI)\n    .then(function(options) {\n      return runFirefox(manifest, options);\n    });\n}\nmodule.exports = execute;\n\nfunction setupPrefs(id, options) {\n  return when.promise(function(resolve) {\n    if (options.prefs) {\n      console.log(\"Using custom preferences \" + options.prefs);\n      options.prefs = require(path.resolve(options.prefs));\n    } else {\n      options.prefs = {};\n    }\n    options.prefs = includePrefs(id, options);\n    return resolve(options);\n  });\n}\nexports.setupPrefs = setupPrefs;\n","/home/travis/build/npmtest/node-npmtest-jpm/node_modules/jpm/lib/sign.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n\nvar _ = require(\"lodash\");\nvar tmp = require(\"tmp\");\nvar nodefn = require(\"when/node\");\nvar when = require(\"when\");\nvar DefaultAddonSigner = require(\"sign-addon\").default;\n\nvar cmd = require(\"./cmd\");\nvar utils = require(\"./utils\");\nvar logger = utils.console;\nvar xpi = require(\"./xpi\");\n\nvar AMO_API_PREFIX = require(\"./settings\").AMO_API_PREFIX;\n\nfunction getXpiInfoForSigning(options) {\n  options = _.assign({\n    addonDir: process.cwd(),\n    xpiPath: null,\n  }, options);\n\n  if (!options.xpiPath) {\n    return utils.getManifest({addonDir: options.addonDir})\n      .then(function(manifest) {\n        return utils.getXpiInfoFromManifest(manifest);\n      });\n  } else {\n    return utils.getXpiInfo(options.xpiPath);\n  }\n}\nexports.getXpiInfoForSigning = getXpiInfoForSigning;\n\nfunction sign(options, config) {\n  config = _.assign({\n    createXPI: xpi,\n    signAddon: DefaultAddonSigner,\n    getXpiInfoForSigning: getXpiInfoForSigning,\n  }, config);\n\n  options = _.assign({\n    addonDir: process.cwd(),\n    apiUrlPrefix: AMO_API_PREFIX,\n  }, options);\n\n  return when.promise(function(resolve, reject) {\n    var missingOptions = [];\n    var toCheck = [\n      {value: options.apiKey, flag: \"--api-key\"},\n      {value: options.apiSecret, flag: \"--api-secret\"},\n    ];\n    toCheck.forEach(function(opt) {\n      if (!opt.value) {\n        missingOptions.push(opt.flag);\n      }\n    });\n    if (missingOptions.length) {\n      console.error(); // eslint-disable-line no-console\n      missingOptions.forEach(function(flag) {\n        console.error(\"  error: missing required option `%s'\", flag); // eslint-disable-line no-console\n      });\n      console.error(); // eslint-disable-line no-console\n      return reject();\n    }\n\n    resolve(config.getXpiInfoForSigning({\n      addonDir: options.addonDir,\n      xpiPath: options.xpi,\n    }));\n\n  }).then(function(xpiInfo) {\n    if (options.xpi) {\n      logger.log(\"Signing XPI: \" + options.xpi);\n      return _.assign(xpiInfo, {xpiPath: options.xpi});\n    } else {\n      var createTmpDir = nodefn.lift(tmp.dir);\n      return createTmpDir({\n        prefix: \"tmp-unsigned-xpi-\",\n        unsafeCleanup: true,\n      })\n        .then(function(tmpResult) {\n          var tmpDir = tmpResult[0];\n          var removeTmpDir = tmpResult[1];\n          var xpiOptions = _.assign({}, options, {\n            xpiPath: tmpDir,\n          });\n\n          return config.createXPI(xpiInfo.manifest, xpiOptions)\n            .then(function(xpiPath) {\n              logger.log(\"Created XPI for signing: \" + xpiPath);\n              return _.assign(xpiInfo, {\n                xpiPath: xpiPath,\n                cleanUp: removeTmpDir,\n              });\n            });\n        });\n    }\n  }).then(function(xpiInfo) {\n\n    if (!xpiInfo.id || !xpiInfo.version) {\n      throw new Error(\n          \"Could not detect this XPI's ID and/or version\\n\\n\" +\n          \"Troubleshooting:\\n\" +\n          \"- Are you in the right directory? If not, try --addon-dir\\n\" +\n          \"- Are you really in a directory of SDK add-on source? If not, try \" +\n             \"signing with the --xpi option\\n\" +\n          \"- Is your manifest ID valid? See \" +\n          \"https://developer.mozilla.org/en-US/Add-ons/Install_Manifests#id\\n\");\n    }\n\n    return config.signAddon({\n      xpiPath: xpiInfo.xpiPath,\n      id: xpiInfo.id,\n      version: xpiInfo.version,\n      apiKey: options.apiKey,\n      apiSecret: options.apiSecret,\n      apiUrlPrefix: options.apiUrlPrefix,\n      apiProxy: options.apiProxy || undefined,\n      verbose: options.verbose,\n      timeout: options.timeout || undefined\n    }).then(function(result) {\n      if (typeof xpiInfo.cleanUp !== \"undefined\") {\n        logger.debug(\"cleaning up XPI temp directory\");\n        xpiInfo.cleanUp();\n      }\n      return result;\n    });\n\n  });\n}\nexports.sign = sign;\n\nfunction signCmd(program, options, config) {\n  config = _.assign({\n    systemProcess: process,\n  }, config);\n  return when.promise(function(resolve, reject) {\n    resolve(cmd.validateProgram(program));\n  }).then(function() {\n    return sign(_.assign({}, options, program), config);\n  }).then(function(result) {\n    logger.log(result.success ? \"SUCCESS\" : \"FAIL\");\n    config.systemProcess.exit(result.success ? 0 : 1);\n  }).catch(function(err) {\n    logger.error(\"FAIL\");\n    if (err) {\n      console.error(err.stack); // eslint-disable-line no-console\n    }\n    config.systemProcess.exit(1);\n  });\n}\nexports.signCmd = signCmd;\n"}